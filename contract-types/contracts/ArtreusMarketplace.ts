/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ArtreusMarketplace {
  export type ItemStruct = {
    collection: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    marketplaceId: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    sold: PromiseOrValue<boolean>;
    oldOwner: PromiseOrValue<string>;
    oldSeller: PromiseOrValue<string>;
    oldPrice: PromiseOrValue<BigNumberish>;
    isResell: PromiseOrValue<boolean>;
    isBanned: PromiseOrValue<boolean>;
    soldFirstTime: PromiseOrValue<boolean>;
    royaltyAmount: PromiseOrValue<BigNumberish>;
    royaltyRecipient: PromiseOrValue<string>;
  };

  export type ItemStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    boolean,
    string,
    string,
    BigNumber,
    boolean,
    boolean,
    boolean,
    BigNumber,
    string
  ] & {
    collection: string;
    tokenId: BigNumber;
    marketplaceId: BigNumber;
    seller: string;
    owner: string;
    price: BigNumber;
    sold: boolean;
    oldOwner: string;
    oldSeller: string;
    oldPrice: BigNumber;
    isResell: boolean;
    isBanned: boolean;
    soldFirstTime: boolean;
    royaltyAmount: BigNumber;
    royaltyRecipient: string;
  };
}

export interface ArtreusMarketplaceInterface extends utils.Interface {
  functions: {
    "_INTERFACE_ID_ROYALTIES_EIP2981()": FunctionFragment;
    "buyNFT(uint256)": FunctionFragment;
    "buyNFT(address,uint256)": FunctionFragment;
    "cancelSale(address,uint256)": FunctionFragment;
    "cancelSale(uint256)": FunctionFragment;
    "collectionIsListed(address)": FunctionFragment;
    "feeAccount()": FunctionFragment;
    "feePercent()": FunctionFragment;
    "fetchSingleItem(uint256)": FunctionFragment;
    "fetchSingleItem(address,uint256)": FunctionFragment;
    "getAllCollections()": FunctionFragment;
    "getAllUnsoldItems()": FunctionFragment;
    "getCollectionActive(address)": FunctionFragment;
    "getCollectionDorm(address)": FunctionFragment;
    "getCollectionItemByTokenId(address,uint256)": FunctionFragment;
    "getCollectionTokenIds(address)": FunctionFragment;
    "getMyItemCreated()": FunctionFragment;
    "getMyNFTPurchased()": FunctionFragment;
    "getMyResellItems()": FunctionFragment;
    "getStuckETH(address)": FunctionFragment;
    "getStuckToken(address,address)": FunctionFragment;
    "listNFT(address,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "precision()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFeePercent(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFeeAccount(address)": FunctionFragment;
    "updateItemPrice(uint256,uint256)": FunctionFragment;
    "updateItemPrice(address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_INTERFACE_ID_ROYALTIES_EIP2981"
      | "buyNFT(uint256)"
      | "buyNFT(address,uint256)"
      | "cancelSale(address,uint256)"
      | "cancelSale(uint256)"
      | "collectionIsListed"
      | "feeAccount"
      | "feePercent"
      | "fetchSingleItem(uint256)"
      | "fetchSingleItem(address,uint256)"
      | "getAllCollections"
      | "getAllUnsoldItems"
      | "getCollectionActive"
      | "getCollectionDorm"
      | "getCollectionItemByTokenId"
      | "getCollectionTokenIds"
      | "getMyItemCreated"
      | "getMyNFTPurchased"
      | "getMyResellItems"
      | "getStuckETH"
      | "getStuckToken"
      | "listNFT"
      | "owner"
      | "precision"
      | "renounceOwnership"
      | "setFeePercent"
      | "transferOwnership"
      | "updateFeeAccount"
      | "updateItemPrice(uint256,uint256)"
      | "updateItemPrice(address,uint256,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_INTERFACE_ID_ROYALTIES_EIP2981",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyNFT(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyNFT(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSale(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSale(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionIsListed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchSingleItem(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchSingleItem(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCollections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUnsoldItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionActive",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionDorm",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionItemByTokenId",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionTokenIds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyItemCreated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyNFTPurchased",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyResellItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStuckETH",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStuckToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listNFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "precision", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePercent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateItemPrice(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateItemPrice(address,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "_INTERFACE_ID_ROYALTIES_EIP2981",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyNFT(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyNFT(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSale(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSale(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionIsListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeAccount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fetchSingleItem(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchSingleItem(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUnsoldItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionDorm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionItemByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyItemCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyNFTPurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyResellItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStuckETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStuckToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "precision", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateItemPrice(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateItemPrice(address,uint256,uint256)",
    data: BytesLike
  ): Result;

  events: {
    "CancelledListing(address,uint256)": EventFragment;
    "ItemListed(address,uint256,uint256,address,address,uint256,address,address,uint256,bool,bool,uint256,address)": EventFragment;
    "ItemSold(address,uint256,address,uint256,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdatedBanItem(address,uint256,bool)": EventFragment;
    "UpdatedFeeAccount(address,address)": EventFragment;
    "UpdatedFeePercent(uint256,uint256)": EventFragment;
    "UpdatedItemPrice(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelledListing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedBanItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedFeeAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedFeePercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedItemPrice"): EventFragment;
}

export interface CancelledListingEventObject {
  collection: string;
  tokenId: BigNumber;
}
export type CancelledListingEvent = TypedEvent<
  [string, BigNumber],
  CancelledListingEventObject
>;

export type CancelledListingEventFilter =
  TypedEventFilter<CancelledListingEvent>;

export interface ItemListedEventObject {
  collection: string;
  tokenId: BigNumber;
  marketplaceId: BigNumber;
  seller: string;
  owner: string;
  price: BigNumber;
  oldOwner: string;
  oldSeller: string;
  oldPrice: BigNumber;
  isResell: boolean;
  soldFirstTime: boolean;
  royaltyAmount: BigNumber;
  royaltyRecipient: string;
}
export type ItemListedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    boolean,
    boolean,
    BigNumber,
    string
  ],
  ItemListedEventObject
>;

export type ItemListedEventFilter = TypedEventFilter<ItemListedEvent>;

export interface ItemSoldEventObject {
  collection: string;
  tokenId: BigNumber;
  buyer: string;
  price: BigNumber;
  royaltyAmount: BigNumber;
  royaltyRecipient: string;
}
export type ItemSoldEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber, string],
  ItemSoldEventObject
>;

export type ItemSoldEventFilter = TypedEventFilter<ItemSoldEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpdatedBanItemEventObject {
  collection: string;
  tokenId: BigNumber;
  value: boolean;
}
export type UpdatedBanItemEvent = TypedEvent<
  [string, BigNumber, boolean],
  UpdatedBanItemEventObject
>;

export type UpdatedBanItemEventFilter = TypedEventFilter<UpdatedBanItemEvent>;

export interface UpdatedFeeAccountEventObject {
  oldAccount: string;
  newAccount: string;
}
export type UpdatedFeeAccountEvent = TypedEvent<
  [string, string],
  UpdatedFeeAccountEventObject
>;

export type UpdatedFeeAccountEventFilter =
  TypedEventFilter<UpdatedFeeAccountEvent>;

export interface UpdatedFeePercentEventObject {
  oldFee: BigNumber;
  newFee: BigNumber;
}
export type UpdatedFeePercentEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdatedFeePercentEventObject
>;

export type UpdatedFeePercentEventFilter =
  TypedEventFilter<UpdatedFeePercentEvent>;

export interface UpdatedItemPriceEventObject {
  collection: string;
  tokenId: BigNumber;
  oldPrice: BigNumber;
  newPrice: BigNumber;
}
export type UpdatedItemPriceEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  UpdatedItemPriceEventObject
>;

export type UpdatedItemPriceEventFilter =
  TypedEventFilter<UpdatedItemPriceEvent>;

export interface ArtreusMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArtreusMarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _INTERFACE_ID_ROYALTIES_EIP2981(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "buyNFT(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "buyNFT(address,uint256)"(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "cancelSale(address,uint256)"(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "cancelSale(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectionIsListed(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { listed: boolean }>;

    feeAccount(overrides?: CallOverrides): Promise<[string]>;

    feePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "fetchSingleItem(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [ArtreusMarketplace.ItemStructOutput] & {
        item: ArtreusMarketplace.ItemStructOutput;
      }
    >;

    "fetchSingleItem(address,uint256)"(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [ArtreusMarketplace.ItemStructOutput] & {
        item: ArtreusMarketplace.ItemStructOutput;
      }
    >;

    getAllCollections(
      overrides?: CallOverrides
    ): Promise<[string[]] & { collecs: string[] }>;

    getAllUnsoldItems(
      overrides?: CallOverrides
    ): Promise<[ArtreusMarketplace.ItemStructOutput[]]>;

    getCollectionActive(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [ArtreusMarketplace.ItemStructOutput[]] & {
        items: ArtreusMarketplace.ItemStructOutput[];
      }
    >;

    getCollectionDorm(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [ArtreusMarketplace.ItemStructOutput[]] & {
        items: ArtreusMarketplace.ItemStructOutput[];
      }
    >;

    getCollectionItemByTokenId(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [ArtreusMarketplace.ItemStructOutput] & {
        item: ArtreusMarketplace.ItemStructOutput;
      }
    >;

    getCollectionTokenIds(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { ids: BigNumber[] }>;

    getMyItemCreated(
      overrides?: CallOverrides
    ): Promise<[ArtreusMarketplace.ItemStructOutput[]]>;

    getMyNFTPurchased(
      overrides?: CallOverrides
    ): Promise<[ArtreusMarketplace.ItemStructOutput[]]>;

    getMyResellItems(
      overrides?: CallOverrides
    ): Promise<[ArtreusMarketplace.ItemStructOutput[]]>;

    getStuckETH(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getStuckToken(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listNFT(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    precision(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFeeAccount(
      newAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateItemPrice(uint256,uint256)"(
      id: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateItemPrice(address,uint256,uint256)"(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _INTERFACE_ID_ROYALTIES_EIP2981(overrides?: CallOverrides): Promise<string>;

  "buyNFT(uint256)"(
    id: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "buyNFT(address,uint256)"(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "cancelSale(address,uint256)"(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "cancelSale(uint256)"(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectionIsListed(
    collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  feeAccount(overrides?: CallOverrides): Promise<string>;

  feePercent(overrides?: CallOverrides): Promise<BigNumber>;

  "fetchSingleItem(uint256)"(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ArtreusMarketplace.ItemStructOutput>;

  "fetchSingleItem(address,uint256)"(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ArtreusMarketplace.ItemStructOutput>;

  getAllCollections(overrides?: CallOverrides): Promise<string[]>;

  getAllUnsoldItems(
    overrides?: CallOverrides
  ): Promise<ArtreusMarketplace.ItemStructOutput[]>;

  getCollectionActive(
    collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ArtreusMarketplace.ItemStructOutput[]>;

  getCollectionDorm(
    collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ArtreusMarketplace.ItemStructOutput[]>;

  getCollectionItemByTokenId(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ArtreusMarketplace.ItemStructOutput>;

  getCollectionTokenIds(
    collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getMyItemCreated(
    overrides?: CallOverrides
  ): Promise<ArtreusMarketplace.ItemStructOutput[]>;

  getMyNFTPurchased(
    overrides?: CallOverrides
  ): Promise<ArtreusMarketplace.ItemStructOutput[]>;

  getMyResellItems(
    overrides?: CallOverrides
  ): Promise<ArtreusMarketplace.ItemStructOutput[]>;

  getStuckETH(
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getStuckToken(
    token: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listNFT(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  precision(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeePercent(
    _feePercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFeeAccount(
    newAccount: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateItemPrice(uint256,uint256)"(
    id: PromiseOrValue<BigNumberish>,
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateItemPrice(address,uint256,uint256)"(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _INTERFACE_ID_ROYALTIES_EIP2981(overrides?: CallOverrides): Promise<string>;

    "buyNFT(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "buyNFT(address,uint256)"(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelSale(address,uint256)"(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelSale(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectionIsListed(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    feeAccount(overrides?: CallOverrides): Promise<string>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    "fetchSingleItem(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ArtreusMarketplace.ItemStructOutput>;

    "fetchSingleItem(address,uint256)"(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ArtreusMarketplace.ItemStructOutput>;

    getAllCollections(overrides?: CallOverrides): Promise<string[]>;

    getAllUnsoldItems(
      overrides?: CallOverrides
    ): Promise<ArtreusMarketplace.ItemStructOutput[]>;

    getCollectionActive(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ArtreusMarketplace.ItemStructOutput[]>;

    getCollectionDorm(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ArtreusMarketplace.ItemStructOutput[]>;

    getCollectionItemByTokenId(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ArtreusMarketplace.ItemStructOutput>;

    getCollectionTokenIds(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getMyItemCreated(
      overrides?: CallOverrides
    ): Promise<ArtreusMarketplace.ItemStructOutput[]>;

    getMyNFTPurchased(
      overrides?: CallOverrides
    ): Promise<ArtreusMarketplace.ItemStructOutput[]>;

    getMyResellItems(
      overrides?: CallOverrides
    ): Promise<ArtreusMarketplace.ItemStructOutput[]>;

    getStuckETH(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getStuckToken(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    listNFT(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    precision(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeAccount(
      newAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateItemPrice(uint256,uint256)"(
      id: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateItemPrice(address,uint256,uint256)"(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CancelledListing(address,uint256)"(
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): CancelledListingEventFilter;
    CancelledListing(
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): CancelledListingEventFilter;

    "ItemListed(address,uint256,uint256,address,address,uint256,address,address,uint256,bool,bool,uint256,address)"(
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      marketplaceId?: null,
      seller?: PromiseOrValue<string> | null,
      owner?: null,
      price?: null,
      oldOwner?: null,
      oldSeller?: null,
      oldPrice?: null,
      isResell?: null,
      soldFirstTime?: null,
      royaltyAmount?: null,
      royaltyRecipient?: null
    ): ItemListedEventFilter;
    ItemListed(
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      marketplaceId?: null,
      seller?: PromiseOrValue<string> | null,
      owner?: null,
      price?: null,
      oldOwner?: null,
      oldSeller?: null,
      oldPrice?: null,
      isResell?: null,
      soldFirstTime?: null,
      royaltyAmount?: null,
      royaltyRecipient?: null
    ): ItemListedEventFilter;

    "ItemSold(address,uint256,address,uint256,uint256,address)"(
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      price?: null,
      royaltyAmount?: null,
      royaltyRecipient?: null
    ): ItemSoldEventFilter;
    ItemSold(
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      price?: null,
      royaltyAmount?: null,
      royaltyRecipient?: null
    ): ItemSoldEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "UpdatedBanItem(address,uint256,bool)"(
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      value?: PromiseOrValue<boolean> | null
    ): UpdatedBanItemEventFilter;
    UpdatedBanItem(
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      value?: PromiseOrValue<boolean> | null
    ): UpdatedBanItemEventFilter;

    "UpdatedFeeAccount(address,address)"(
      oldAccount?: PromiseOrValue<string> | null,
      newAccount?: PromiseOrValue<string> | null
    ): UpdatedFeeAccountEventFilter;
    UpdatedFeeAccount(
      oldAccount?: PromiseOrValue<string> | null,
      newAccount?: PromiseOrValue<string> | null
    ): UpdatedFeeAccountEventFilter;

    "UpdatedFeePercent(uint256,uint256)"(
      oldFee?: PromiseOrValue<BigNumberish> | null,
      newFee?: PromiseOrValue<BigNumberish> | null
    ): UpdatedFeePercentEventFilter;
    UpdatedFeePercent(
      oldFee?: PromiseOrValue<BigNumberish> | null,
      newFee?: PromiseOrValue<BigNumberish> | null
    ): UpdatedFeePercentEventFilter;

    "UpdatedItemPrice(address,uint256,uint256,uint256)"(
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      oldPrice?: null,
      newPrice?: null
    ): UpdatedItemPriceEventFilter;
    UpdatedItemPrice(
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      oldPrice?: null,
      newPrice?: null
    ): UpdatedItemPriceEventFilter;
  };

  estimateGas: {
    _INTERFACE_ID_ROYALTIES_EIP2981(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyNFT(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "buyNFT(address,uint256)"(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "cancelSale(address,uint256)"(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "cancelSale(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectionIsListed(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeAccount(overrides?: CallOverrides): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    "fetchSingleItem(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fetchSingleItem(address,uint256)"(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllCollections(overrides?: CallOverrides): Promise<BigNumber>;

    getAllUnsoldItems(overrides?: CallOverrides): Promise<BigNumber>;

    getCollectionActive(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollectionDorm(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollectionItemByTokenId(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollectionTokenIds(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMyItemCreated(overrides?: CallOverrides): Promise<BigNumber>;

    getMyNFTPurchased(overrides?: CallOverrides): Promise<BigNumber>;

    getMyResellItems(overrides?: CallOverrides): Promise<BigNumber>;

    getStuckETH(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getStuckToken(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listNFT(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    precision(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFeeAccount(
      newAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateItemPrice(uint256,uint256)"(
      id: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateItemPrice(address,uint256,uint256)"(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _INTERFACE_ID_ROYALTIES_EIP2981(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "buyNFT(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "buyNFT(address,uint256)"(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "cancelSale(address,uint256)"(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "cancelSale(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectionIsListed(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fetchSingleItem(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fetchSingleItem(address,uint256)"(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllCollections(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllUnsoldItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollectionActive(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollectionDorm(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollectionItemByTokenId(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollectionTokenIds(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMyItemCreated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMyNFTPurchased(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMyResellItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStuckETH(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getStuckToken(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listNFT(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    precision(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeAccount(
      newAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateItemPrice(uint256,uint256)"(
      id: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateItemPrice(address,uint256,uint256)"(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
